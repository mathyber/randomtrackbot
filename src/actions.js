const {playTrack, pauseTrack, likeTrack, authService} = require("../services/spotifyService");
const {getLastUserRequests, allUsers, isPremium, premiumUntil, checkUserLimit, incrementUserRequest, activatePremium} = require("../storage/jsonStorage");
const {getLastRequestsText, getInfo, usersAll, getRandomTrack, getPostTrackResult, parseCommandArgs, allBtns} = require("./utils");
const {pageSize, currentYear, pngLogo} = require("../const/const");
const config = require("../config/config");
const {findSongYouTubeByIsrc} = require("../services/youtubeService");
const lastRequestTime = new Map();

const getTargetTrackId = async (ctx, isFromButton, trackId) => {
    const userId = Number(ctx.from.id);
    let targetTrackId = trackId;

    if (!(isFromButton && targetTrackId)) {
        const lastTrack = global.userLastTracks.get(userId);
        if (!lastTrack) {
            await ctx.reply('–°–Ω–∞—á–∞–ª–∞ –Ω–∞–π–¥–∏ —Ç—Ä–µ–∫ —Å –ø–æ–º–æ—â—å—é /track, /fresh, /ultra_fresh, /hipster –∏–ª–∏ /genre.', { parse_mode: 'HTML' });
            return null;
        }
        targetTrackId = lastTrack.link.split('/track/')[1];
    }

    return targetTrackId;
};

const fetchTrack = async (ctx, { year, tag, genre, onlyLongTitle = false }, getUserToken) => {
    const userId = Number(ctx.from.id);
    const now = Date.now();
    const lastTime = lastRequestTime.get(userId) || 0;

    if (now - lastTime < 1000) {
        return ctx.reply('–°–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ! –ü–æ–¥–æ–∂–¥–∏ —Å–µ–∫—É–Ω–¥—É', { parse_mode: 'HTML' });
    }
    lastRequestTime.set(userId, now);

    const limitCheck = checkUserLimit(userId, config.GLOBAL_LIMIT);
    if (!limitCheck.allowed) {
        return ctx.reply(
            `–¢—ã –ø—Ä–µ–≤—ã—Å–∏–ª –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ (${config.GLOBAL_LIMIT}). –û—Å—Ç–∞–ª–æ—Å—å: ${limitCheck.remaining}. –ü–æ–ø—Ä–æ–±—É–π –∑–∞–≤—Ç—Ä–∞!`,
            { parse_mode: 'HTML' }
        );
    }

    const searchingMessage = await ctx.reply('–ò—â–µ–º, —á—Ç–æ —Ç–µ–±–µ –ø–æ—Å–ª—É—à–∞—Ç—å... ‚è≥', { parse_mode: 'HTML' });
    const chatId = searchingMessage.chat.id;
    const messageId = searchingMessage.message_id;

    try {
        const spotifyData = await getRandomTrack(ctx, year, tag, genre, onlyLongTitle);
        if (spotifyData) {
            const youtubeUrl = await findSongYouTubeByIsrc(spotifyData?.isrc, spotifyData);

            await ctx.telegram.deleteMessage(chatId, messageId);

            const trackId = spotifyData.link.split('/track/')[1];
            const inlineBtns = [[{ text: 'üü¢ Spotify', url: spotifyData.link }]];
            youtubeUrl && inlineBtns.push([{ text: 'üü• YouTube', url: youtubeUrl }]);

            const token = await getUserToken(userId);
            const commandType = onlyLongTitle ? 'long_title' : genre ? 'genre' : year ? 'fresh' : tag === 'new' ? 'ultra_fresh' : tag === 'hipster' ? 'hipster' : 'track';
            if (token) {
                inlineBtns.push([
                    { text: '‚ñ∂Ô∏è', callback_data: `play_${trackId}` },
                    { text: '‚è©', callback_data: `playfrom_${trackId}` },
                    { text: '‚è∏Ô∏è', callback_data: `pause_${trackId}` },
                    { text: '‚ù§Ô∏è', callback_data: `like_${trackId}` }
                ]);
                inlineBtns.push([
                    { text: 'üîÑ‚ñ∂Ô∏è –ï—â—ë + Play', callback_data: `moreplay_${commandType}_${genre}` },
                    { text: 'üîÑ‚è© –ï—â—ë + 1m', callback_data: `moreplayfrom_${commandType}_${genre}` }
                ]);
            }

            inlineBtns.push([
                { text: `üîÑ –ï—â—ë: /${commandType} ${genre || ''}`, callback_data: `more_${commandType}_${genre}` },
            ]);

            const reply = getPostTrackResult(spotifyData, youtubeUrl, limitCheck.remaining - 1);
            await ctx.replyWithPhoto(
                { url: spotifyData.img },
                {
                    caption: reply,
                    parse_mode: 'HTML',
                    reply_markup: { inline_keyboard: inlineBtns },
                }
            );

            await allBtns(ctx);
            incrementUserRequest(userId);
            global.userLastTracks.set(userId, spotifyData);
        } else {
            await ctx.telegram.deleteMessage(chatId, messageId);
            return ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç—Ä–µ–∫. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.', { parse_mode: 'HTML' });
        }
    } catch (e) {
        console.error('FetchTrack Error:', e);
        await ctx.telegram.deleteMessage(chatId, messageId).catch(() => {});
        return ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞', { parse_mode: 'HTML' });
    }
};

const playSong = async (getUserToken, isPlayFrom = false, ctx, isFromButton = false, trackId = null, time) => {
    const args = isPlayFrom ? (time || ctx.message.text.split(' ').slice(1).join('')) : null;
    const targetTrackId = await getTargetTrackId(ctx, isFromButton, trackId);
    if (!targetTrackId) return;

    let positionMs = 0;
    if (args) {
        const [minutes, seconds] = args.split(':').map(Number);
        if (!isNaN(minutes) && !isNaN(seconds) && seconds < 60) {
            positionMs = (minutes * 60 + seconds) * 1000;
        } else {
            return ctx.reply('–£–∫–∞–∂–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–º–∏–Ω—É—Ç—ã:—Å–µ–∫—É–Ω–¥—ã", –Ω–∞–ø—Ä–∏–º–µ—Ä /playfrom 1:00', { parse_mode: 'HTML' });
        }
    }

    return await serviceAction(ctx, getUserToken, isFromButton, playTrack, targetTrackId, positionMs, args);
};

const play = async (ctx, getUserToken, isFromButton = false, trackId = null) => {
    await playSong(getUserToken, false, ctx, isFromButton, trackId);
};

const playFrom = async (ctx, getUserToken, isFromButton = false, trackId = null, time) => {
    await playSong(getUserToken, true, ctx, isFromButton, trackId, time);
};

const serviceAction = async (ctx, getUserToken, isFromButton, func, targetTrackId, positionMs, args) => {
    const userId = Number(ctx.from.id);
    const token = await getUserToken(userId);

    if (!token) {
        return auth(ctx);
    }

    let searchingMessage = null;
    if (!isFromButton) {
        searchingMessage = await ctx.reply('–ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ... ‚è≥', {parse_mode: 'HTML'});
    }
    try {
        const {isError, message} = await func(token, targetTrackId, positionMs, args);

        if (searchingMessage) await ctx.telegram.deleteMessage(ctx.chat.id, searchingMessage.message_id).catch(() => {});

        if (!isError && isFromButton) {
            await ctx.answerCbQuery(message);
        } else {
            await ctx.reply(message, {parse_mode: 'HTML'});
        }
    } catch (error) {
        console.error(error);
    }
}

const pause = async (ctx, getUserToken, isFromButton = false) => {
    return await serviceAction(ctx, getUserToken, isFromButton, pauseTrack);
};

const like = async (ctx, getUserToken, isFromButton = false, trackId = null) => {
    const userId = Number(ctx.from.id);
    const token = await getUserToken(userId);

    if (!token) {
        return auth(ctx);
    }

    const targetTrackId = await getTargetTrackId(ctx, isFromButton, trackId);
    if (!targetTrackId) return;

    let searchingMessage = null;
    if (!isFromButton) {
        searchingMessage = await ctx.reply('–î–æ–±–∞–≤–ª—è–µ–º –≤ –ª—é–±–∏–º—ã–µ... ‚è≥', { parse_mode: 'HTML' });
    }
    try {
        const {isError, message} = await likeTrack(token, targetTrackId);

        if (searchingMessage) await ctx.telegram.deleteMessage(ctx.chat.id, searchingMessage.message_id).catch(() => {});

        if (!isError && isFromButton) {
            await ctx.answerCbQuery(message);
        } else {
            await ctx.reply(message, { parse_mode: 'HTML' });
        }
    } catch (error) {
        console.error(error);
    }
};

const auth = async (ctx, getUserToken) => {
    const userId = Number(ctx.from.id);
    const token = await getUserToken(userId);

    if (token) {
        return ctx.reply('–¢—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω', { parse_mode: 'HTML' });
    }

    const {authUrl, text} = await authService(userId);

    return ctx.reply(
        text || '–ê–≤—Ç–æ—Ä–∏–∑—É–π—Å—è',
        {
            parse_mode: 'HTML',
            reply_markup: {
                inline_keyboard: [[{ text: '–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è', url: authUrl }]],
            },
        }
    );
};

const logout = async (ctx, getUserToken, removeUserToken) => {
    const userId = Number(ctx.from.id);
    const token = await getUserToken(userId);

    if (!token) {
        return ctx.reply('–¢—ã –∏ —Ç–∞–∫ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω', { parse_mode: 'HTML' });
    }

    const removed = removeUserToken(userId);
    if (removed) {
        return ctx.reply('–¢—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–µ–ª –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞ –º—É–∑—ã–∫–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞', { parse_mode: 'HTML' });
    } else {
        return ctx.reply('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.', { parse_mode: 'HTML' });
    }
}

const lastRequests = (ctx) => {
    const userId = Number(ctx.from.id);
    const lastRequestData = getLastUserRequests(userId);

    return ctx.reply(getLastRequestsText(lastRequestData), { parse_mode: 'HTML' });
}

const info = (ctx) => {
    return ctx.replyWithPhoto(
        { source: pngLogo },
        {
            caption: getInfo(),
            parse_mode: 'HTML'
        }
    )
}

const botUsers = (ctx, pageStr) => {
    const page = Number(pageStr || 0);
    if (isNaN(page)) {
        return ctx.reply('–ù–µ–≤–µ—Ä–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç', { parse_mode: 'HTML' });
    }
    try {
        const data = allUsers();
        const userId = Number(ctx.from.id);
        const inlineBtns = [];

        if (data?.length && (page && page !== 0)) {
            inlineBtns.push({ text: '<', callback_data: `botusers_${page - 1}` })
        }

        if (data?.length && (((page + 1) * pageSize) < data.length)) {
            inlineBtns.push({ text: '>', callback_data: `botusers_${page + 1}` })
        }

        if (userId.toString() === config.ADMIN_TELEGRAM_ID.toString()) {
            return ctx.reply(usersAll(data, page), {
                reply_markup: {
                    inline_keyboard: [inlineBtns]
                },
                parse_mode: 'HTML'
            });
        } else {
            return ctx.reply('–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.', { parse_mode: 'HTML' });
        }
    } catch (e) {
        console.error(e);
        return ctx.reply('–û—à–∏–±–∫–∞', { parse_mode: 'HTML' });
    }
}

const genre = async (ctx, getUserToken) => {
    const genre = parseCommandArgs(ctx);
    if (!genre) return ctx.reply('–£–∫–∞–∂–∏ –∂–∞–Ω—Ä, –Ω–∞–ø—Ä–∏–º–µ—Ä /genre rock', { parse_mode: 'HTML' });
    await fetchTrack(ctx, { genre }, getUserToken);
}

const premium = (ctx) => {
    const userId = Number(ctx.from.id);
    const isUserPremium = isPremium(userId);

    if (isUserPremium) {
        ctx.reply(
            `–£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –ø—Ä–µ–º–∏—É–º! –û–Ω –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ ${premiumUntil(userId)}. –õ–∏–º–∏—Ç: ${config.PREMIUM_LIMIT} –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å.`,
            { parse_mode: 'HTML' }
        );
    } else {
        ctx.reply(
            `–•–æ—á–µ—à—å –ø—Ä–µ–º–∏—É–º? –ü–æ–ª—É—á–∏ ${config.PREMIUM_LIMIT} –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å –≤–º–µ—Å—Ç–æ ${config.GLOBAL_LIMIT}! –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å (–∑–∞–≥–ª—É—à–∫–∞).`,
            {
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [[{ text: '–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–º–∏—É–º', callback_data: 'activate_premium' }]],
                },
            }
        );
    }
}

const activatePrem = async (ctx) => {
    const userId = Number(ctx.from.id);
    const chatId = ctx.chat.id;
    activatePremium(userId);

    const messageId = ctx.callbackQuery.message.message_id;
    try {
        await ctx.telegram.deleteMessage(chatId, messageId);
    } catch (e) {
        await ctx.reply('–±–ª–µ–Ω....');
    }
    await ctx.reply(
        `–ü—Ä–µ–º–∏—É–º —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è ${config.PREMIUM_LIMIT} –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å –¥–æ ${premiumUntil(userId)}.`,
        { parse_mode: 'HTML' }
    );
}

const more = async (ctx, getUserToken) => {
    const [_, commandType, genreValue] = ctx.match;
    const year = commandType === 'fresh' ? currentYear : null;
    const tag = commandType === 'ultra_fresh' ? 'new' : commandType === 'hipster' ? 'hipster' : null;
    const genre = commandType === 'genre' ? genreValue : null;
    const onlyLongTitle = commandType === 'long_title';

    await fetchTrack(ctx, {year, tag, genre, onlyLongTitle}, getUserToken);
}

const morePlay = async (ctx, getUserToken, isPlayFrom) => {
    await more(ctx, getUserToken);
    if (isPlayFrom) {
        await playFrom(ctx, getUserToken, true, null, '1:00');
    } else {
        await play(ctx, getUserToken, true);
    }
};

module.exports = {
    morePlay,
    more,
    like,
    pause,
    playFrom,
    play,
    activatePrem,
    botUsers,
    premium,
    genre,
    auth,
    info,
    lastRequests,
    logout,
    fetchTrack
}