const { findSongYouTubeByIsrc } = require('../services/youtubeService');
const {
    saveUserRequest,
    checkUserLimit,
    incrementUserRequest,
    isPremium,
    premiumUntil,
    activatePremium,
    getLastUserRequests, allUsers
} = require('../storage/jsonStorage');
const config = require('../config/config');
const {
    getPostTrackResult,
    getRandomTrack,
    getLastRequestsText,
    getInfo,
    usersAll
} = require("./utils");
const path = require('path');
const axios = require('axios');
const {COMMANDS, ALL_COMMANDS_TEXT, DESCRIPTION, currentYear, pageSize} = require("../const/const");
const {playTrack} = require("../services/spotifyService");
const pngLogo = path.join(__dirname, '../files/1.png');
const lastRequestTime = new Map();

const allBtns = (ctx, txt, withImg) => {
    const text = txt || '–≤—ã–±–µ—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:';
    const cmds = COMMANDS.map(c => c.cmd);
    const btns = {
        parse_mode: 'HTML',
        reply_markup: {
            keyboard: [
                [cmds[0], cmds[3]],
                [cmds[1], cmds[2]],
                [cmds[4], cmds[5]],
            ],
            resize_keyboard: true
        },
    };
    return withImg
        ? ctx.replyWithPhoto({ source: pngLogo }, { caption: text, ...btns })
        : ctx.reply(text, btns);
};

const parseCommandArgs = (ctx) => {
    const text = ctx.message?.text?.trim();
    if (!text) return null;
    const args = text.split(' ').slice(1).join(' ').trim();
    if (!args) return null;
    return args.replace(/\s+/g, '+');
};

const fetchTrack = async (ctx, { year, tag, genre, onlyLongTitle = false }, getUserToken) => {
    const userId = Number(ctx.from.id);
    const now = Date.now();
    const lastTime = lastRequestTime.get(userId) || 0;

    if (now - lastTime < 1000) {
        return ctx.reply('–°–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ! –ü–æ–¥–æ–∂–¥–∏ —Å–µ–∫—É–Ω–¥—É', { parse_mode: 'HTML' });
    }
    lastRequestTime.set(userId, now);

    const limitCheck = checkUserLimit(userId, config.GLOBAL_LIMIT);
    if (!limitCheck.allowed) {
        return ctx.reply(
            `–¢—ã –ø—Ä–µ–≤—ã—Å–∏–ª –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ (${config.GLOBAL_LIMIT}). –û—Å—Ç–∞–ª–æ—Å—å: ${limitCheck.remaining}. –ü–æ–ø—Ä–æ–±—É–π –∑–∞–≤—Ç—Ä–∞!`,
            { parse_mode: 'HTML' }
        );
    }

    const searchingMessage = await ctx.reply('–ò—â–µ–º, —á—Ç–æ —Ç–µ–±–µ –ø–æ—Å–ª—É—à–∞—Ç—å... ‚è≥', { parse_mode: 'HTML' });
    const chatId = searchingMessage.chat.id;
    const messageId = searchingMessage.message_id;

    try {
        const spotifyData = await getRandomTrack(ctx, year, tag, genre, onlyLongTitle);
        if (spotifyData) {
            const youtubeUrl = await findSongYouTubeByIsrc(spotifyData?.isrc, spotifyData);

            await ctx.telegram.deleteMessage(chatId, messageId);

            const trackId = spotifyData.link.split('/track/')[1];
            const inlineBtns = [[{ text: 'üü¢ Spotify', url: spotifyData.link }]];
            youtubeUrl && inlineBtns.push([{ text: 'üü• YouTube', url: youtubeUrl }]);

            const token = await getUserToken(userId);
            const commandType = onlyLongTitle ? 'long_title' : genre ? 'genre' : year ? 'fresh' : tag === 'new' ? 'ultra_fresh' : tag === 'hipster' ? 'hipster' : 'track';
            if (token) {
                inlineBtns.push([
                    { text: '‚ñ∂Ô∏è', callback_data: `play_${trackId}` },
                    { text: '‚è©', callback_data: `playfrom_${trackId}` },
                    { text: '‚è∏Ô∏è', callback_data: `pause_${trackId}` },
                    { text: '‚ù§Ô∏è', callback_data: `like_${trackId}` }
                ]);
                inlineBtns.push([
                    { text: 'üîÑ‚ñ∂Ô∏è –ï—â—ë + Play', callback_data: `moreplay_${commandType}_${genre}` },
                    { text: 'üîÑ‚è© –ï—â—ë + 1m', callback_data: `moreplayfrom_${commandType}_${genre}` }
                ]);
            }

            inlineBtns.push([
                { text: `üîÑ –ï—â—ë: /${commandType} ${genre || ''}`, callback_data: `more_${commandType}_${genre}` },
            ]);

            const reply = getPostTrackResult(spotifyData, youtubeUrl, limitCheck.remaining - 1);
            await ctx.replyWithPhoto(
                spotifyData.img ? { url: spotifyData.img } : { source: pngLogo },
                {
                    caption: reply,
                    parse_mode: 'HTML',
                    reply_markup: { inline_keyboard: inlineBtns },
                }
            );

            await allBtns(ctx);
            incrementUserRequest(userId);
            global.userLastTracks.set(userId, spotifyData);
        } else {
            await ctx.telegram.deleteMessage(chatId, messageId);
            return ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç—Ä–µ–∫. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.', { parse_mode: 'HTML' });
        }
    } catch (e) {
        console.error('FetchTrack Error:', e);
        await ctx.telegram.deleteMessage(chatId, messageId).catch(() => {});
        return ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞', { parse_mode: 'HTML' });
    }
};

const getTargetTrackId = async (ctx, isFromButton, trackId) => {
    const userId = Number(ctx.from.id);
    let targetTrackId = trackId;

    if (!(isFromButton && targetTrackId)) {
        const lastTrack = global.userLastTracks.get(userId);
        if (!lastTrack) {
            await ctx.reply('–°–Ω–∞—á–∞–ª–∞ –Ω–∞–π–¥–∏ —Ç—Ä–µ–∫ —Å –ø–æ–º–æ—â—å—é /track, /fresh, /ultra_fresh, /hipster –∏–ª–∏ /genre.', { parse_mode: 'HTML' });
            return null;
        }
        targetTrackId = lastTrack.link.split('/track/')[1];
    }

    return targetTrackId;
};

function setupHandlers(bot, { getUserToken, removeUserToken }) {
    bot.start((ctx) => {
        const userId = Number(ctx.from.id);
        saveUserRequest(userId, []);
        allBtns(ctx, getInfo(), true);
    });

    const playSong = async (isPlayFrom = false, ctx, isFromButton = false, trackId = null, time) => {
        const userId = Number(ctx.from.id);
        const token = await getUserToken(userId);
        const args = isPlayFrom ? (time || ctx.message.text.split(' ').slice(1).join('')) : null;

        if (!token) {
            return auth(ctx);
        }

        const targetTrackId = await getTargetTrackId(ctx, isFromButton, trackId);
        if (!targetTrackId) return;

        let positionMs = 0;
        if (args) {
            const [minutes, seconds] = args.split(':').map(Number);
            if (!isNaN(minutes) && !isNaN(seconds) && seconds < 60) {
                positionMs = (minutes * 60 + seconds) * 1000;
            } else {
                return ctx.reply('–£–∫–∞–∂–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–º–∏–Ω—É—Ç—ã:—Å–µ–∫—É–Ω–¥—ã", –Ω–∞–ø—Ä–∏–º–µ—Ä /playfrom 1:00', { parse_mode: 'HTML' });
            }
        }

        let searchingMessage = null;
        if (!isFromButton) {
            searchingMessage = await ctx.reply('–ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ... ‚è≥', { parse_mode: 'HTML' });
        }
        try {
            const {isError, message} = await playTrack(token, targetTrackId, positionMs, args);

            if (searchingMessage) await ctx.telegram.deleteMessage(ctx.chat.id, searchingMessage.message_id).catch(() => {});

            if (!isError) {
                if (isFromButton) {
                    await ctx.answerCbQuery(`–í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è —Å ${args || '–Ω–∞—á–∞–ª–∞'}`);
                } else if (searchingMessage) {
                    await ctx.telegram.deleteMessage(ctx.chat.id, searchingMessage.message_id);
                    await ctx.reply(message, { parse_mode: 'HTML' });
                }
            }
        } catch (error) {
            console.error(error);
        }
    };

    const play = async (ctx, isFromButton = false, trackId = null) => {
        await playSong(false, ctx, isFromButton, trackId);
    };

    const playFrom = async (ctx, isFromButton = false, trackId = null, time) => {
        await playSong(true, ctx, isFromButton, trackId, time);
    };

    const pause = async (ctx, isFromButton = false) => {
        const userId = Number(ctx.from.id);
        const token = await getUserToken(userId);

        if (!token) {
            return auth(ctx);
        }

        let searchingMessage = null;
        if (!isFromButton) {
            searchingMessage = await ctx.reply('–ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ... ‚è≥', { parse_mode: 'HTML' });
        }
        try {
            const devicesResponse = await axios.get('https://api.spotify.com/v1/me/player/devices', {
                headers: { Authorization: `Bearer ${token}` },
            });
            const devices = devicesResponse.data.devices;

            const activeDevice = devices.find(device => device.is_active);
            if (!activeDevice) {
                if (searchingMessage) await ctx.telegram.deleteMessage(ctx.chat.id, searchingMessage.message_id).catch(() => {});
                return ctx.reply('–ù–µ –Ω–∞—à—ë–ª –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤. –û—Ç–∫—Ä–æ–π Spotify –≥–¥–µ-–Ω–∏–±—É–¥—å.', { parse_mode: 'HTML' });
            }

            await axios.put('https://api.spotify.com/v1/me/player/pause', {}, {
                headers: { Authorization: `Bearer ${token}` },
            });

            if (isFromButton) {
                await ctx.answerCbQuery('–ü–∞—É–∑–∞');
            } else if (searchingMessage) {
                try {
                    await ctx.telegram.deleteMessage(ctx.chat.id, searchingMessage.message_id);
                    await ctx.reply(`–ü–æ—Å—Ç–∞–≤–∏–ª–∏ –Ω–∞ –ø–∞—É–∑—É –Ω–∞ ${activeDevice.name}!`, { parse_mode: 'HTML' });
                } catch (telegramError) {
                    console.error('Telegram Error after pause:', telegramError);
                    await ctx.reply('–ü–∞—É–∑–∞ —Å—Ä–∞–±–æ—Ç–∞–ª–∞, –Ω–æ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º.', { parse_mode: 'HTML' });
                }
            }
        } catch (error) {
            console.error('Pause Error:', error.response?.data || error.message);
            if (searchingMessage) await ctx.telegram.deleteMessage(ctx.chat.id, searchingMessage.message_id).catch(() => {});
            const errorMsg = error.response?.data?.error?.message || '–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –ø–∞—É–∑—É.';
            return ctx.reply(`–û—à–∏–±–∫–∞ –ø–∞—É–∑—ã: ${errorMsg} –ü–æ–ø—Ä–æ–±—É–π –æ—Ç–∫—Ä—ã—Ç—å Spotify –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ.`, { parse_mode: 'HTML' });
        }
    };

    const like = async (ctx, isFromButton = false, trackId = null) => {
        const userId = Number(ctx.from.id);
        const token = await getUserToken(userId);

        if (!token) {
            return auth(ctx);
        }

        const targetTrackId = await getTargetTrackId(ctx, isFromButton, trackId);
        if (!targetTrackId) return;

        let searchingMessage = null;
        if (!isFromButton) {
            searchingMessage = await ctx.reply('–î–æ–±–∞–≤–ª—è–µ–º –≤ –ª—é–±–∏–º—ã–µ... ‚è≥', { parse_mode: 'HTML' });
        }
        try {
            await axios.put(`https://api.spotify.com/v1/me/tracks`, {
                ids: [targetTrackId],
            }, {
                headers: { Authorization: `Bearer ${token}` },
            });

            if (isFromButton) {
                await ctx.answerCbQuery('–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –ª—é–±–∏–º—ã–µ');
            } else if (searchingMessage) {
                try {
                    await ctx.telegram.deleteMessage(ctx.chat.id, searchingMessage.message_id);
                    await ctx.reply('–¢—Ä–µ–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ª—é–±–∏–º—ã–µ!', { parse_mode: 'HTML' });
                } catch (telegramError) {
                    console.error('Telegram Error after like:', telegramError);
                    await ctx.reply('–¢—Ä–µ–∫ –¥–æ–±–∞–≤–ª–µ–Ω, –Ω–æ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º.', { parse_mode: 'HTML' });
                }
            }
        } catch (error) {
            console.error('Like Error:', error.response?.data || error.message);
            if (searchingMessage) await ctx.telegram.deleteMessage(ctx.chat.id, searchingMessage.message_id).catch(() => {});
            const errorMsg = error.response?.data?.error?.message || '–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –≤ –ª—é–±–∏–º—ã–µ.';
            return ctx.reply(`–û—à–∏–±–∫–∞: ${errorMsg}`, { parse_mode: 'HTML' });
        }
    };

    const auth = async (ctx) => {
        const userId = Number(ctx.from.id);
        const token = await getUserToken(userId);

        if (token) {
            return ctx.reply('–¢—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω', { parse_mode: 'HTML' });
        }

        const authUrl = `https://accounts.spotify.com/authorize?client_id=${config.SPOTIFY_CLIENT_ID}&response_type=code&redirect_uri=https://${config.SERVER_URL}:${config.PORT}/callback&scope=user-read-playback-state+user-modify-playback-state+user-library-modify&state=${userId}`;
        return ctx.reply(
            '–ê–≤—Ç–æ—Ä–∏–∑—É–π—Å—è –≤ Spotify (–Ω—É–∂–µ–Ω –ø—Ä–µ–º–∏—É–º):',
            {
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [[{ text: '–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è', url: authUrl }]],
                },
            }
        );
    };

    const logout = async (ctx) => {
        const userId = Number(ctx.from.id);
        const token = await getUserToken(userId);

        if (!token) {
            return ctx.reply('–¢—ã –∏ —Ç–∞–∫ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –≤ Spotify.', { parse_mode: 'HTML' });
        }

        const removed = removeUserToken(userId);
        if (removed) {
            return ctx.reply('–¢—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–µ–ª –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞ Spotify!', { parse_mode: 'HTML' });
        } else {
            return ctx.reply('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.', { parse_mode: 'HTML' });
        }
    }

    const lastRequests = (ctx) => {
        const userId = Number(ctx.from.id);
        const lastRequestData = getLastUserRequests(userId);

        return ctx.reply(getLastRequestsText(lastRequestData), { parse_mode: 'HTML' });
    }

    const info = (ctx) => {
        return ctx.replyWithPhoto({ source: pngLogo }, { caption: getInfo(), parse_mode: 'HTML', })
    }

    const botUsers = (ctx, pageStr) => {
        const page = Number(pageStr || 0);
        if (isNaN(page)) {
            return ctx.reply('–ù–µ–≤–µ—Ä–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç', { parse_mode: 'HTML' });
        }
        try {
            const data = allUsers();
            const userId = Number(ctx.from.id);
            const inlineBtns = [];

            if (data?.length && (page && page !== 0)) {
                inlineBtns.push({ text: '<', callback_data: `botusers_${page - 1}` })
            }

            if (data?.length && (((page + 1) * pageSize) < data.length)) {
                inlineBtns.push({ text: '>', callback_data: `botusers_${page + 1}` })
            }

            if (userId.toString() === config.ADMIN_TELEGRAM_ID.toString()) {
                return ctx.reply(usersAll(data, page), {
                    reply_markup: {
                        inline_keyboard: [inlineBtns]
                    },
                    parse_mode: 'HTML'
                });
            } else {
                return ctx.reply('–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.', { parse_mode: 'HTML' });
            }
        } catch (e) {
            console.error(e);
            return ctx.reply('–û—à–∏–±–∫–∞', { parse_mode: 'HTML' });
        }
    }

    const commands = {
        track: {
            handler: (ctx) => fetchTrack(ctx, {}, getUserToken),
            description: '—Ä–∞–Ω–¥–æ–º–Ω—ã–π —Ç—Ä–µ–∫',
        },
        fresh: {
            handler: (ctx) => fetchTrack(ctx, { year: currentYear }, getUserToken),
            description: `—Ä–∞–Ω–¥–æ–º–Ω—ã–π —Ç—Ä–µ–∫ ${currentYear} –≥–æ–¥–∞`,
        },
        ultra_fresh: {
            handler: (ctx) => fetchTrack(ctx, { tag: 'new' }, getUserToken),
            description: '—Ä–∞–Ω–¥–æ–º–Ω—ã–π —Ç—Ä–µ–∫ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–≤–µ –Ω–µ–¥–µ–ª–∏',
        },
        hipster: {
            handler: (ctx) => fetchTrack(ctx, { tag: 'hipster' }, getUserToken),
            description: '—Ä–∞–Ω–¥–æ–º–Ω—ã–π —Ç—Ä–µ–∫ —Å –Ω–∏–∑–∫–æ–π –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å—é',
        },
        genre: {
            handler: async (ctx) => {
                const genre = parseCommandArgs(ctx);
                if (!genre) return ctx.reply('–£–∫–∞–∂–∏ –∂–∞–Ω—Ä, –Ω–∞–ø—Ä–∏–º–µ—Ä /genre rock', { parse_mode: 'HTML' });
                await fetchTrack(ctx, { genre }, getUserToken);
            },
            description: '—Ä–∞–Ω–¥–æ–º–Ω—ã–π —Ç—Ä–µ–∫ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –∂–∞–Ω—Ä–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä /genre rock',
        },
        long_title: {
            handler: (ctx) => fetchTrack(ctx, {onlyLongTitle: true}, getUserToken),
            description: '—Ä–∞–Ω–¥–æ–º–Ω—ã–π —Ç—Ä–µ–∫ c –¥–ª–∏–Ω–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º (—Ä–æ—Ñ–ª–æ—Ñ—É–Ω–∫—Ü–∏—è - –ø–æ–∫–∞–∑–∞—Ç—å –∑–∞—Å–∏–ª–∏–µ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–π –∫–ª–∞—Å—Å–∏–∫–∏)',
        },
        play: { handler: (ctx) => play(ctx) },
        playfrom: { handler: (ctx) => playFrom(ctx) },
        pause: { handler: (ctx) => pause(ctx) },
        like: { handler: (ctx) => like(ctx) },
        auth: { handler: auth },
        logout: { handler: logout },
        last_requests: { handler: lastRequests },
        bot_users: { handler: (ctx) => botUsers(ctx) },
        // bot_users_r: { handler: (ctx) => botUsers(ctx, true) },
        info: { handler: info },
    };

    bot.action(/^botusers_(.+)$/, (ctx) => {
        const [_, pageStr] = ctx.match;
        botUsers(ctx, pageStr)
    });

    Object.entries(commands).forEach(([cmd, { handler }]) => {
        bot.command(cmd, handler);
    });

    bot.command('premium', (ctx) => {
        const userId = Number(ctx.from.id);
        const isUserPremium = isPremium(userId);

        if (isUserPremium) {
            ctx.reply(
                `–£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –ø—Ä–µ–º–∏—É–º! –û–Ω –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ ${premiumUntil(userId)}. –õ–∏–º–∏—Ç: ${config.PREMIUM_LIMIT} –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å.`,
                { parse_mode: 'HTML' }
            );
        } else {
            ctx.reply(
                `–•–æ—á–µ—à—å –ø—Ä–µ–º–∏—É–º? –ü–æ–ª—É—á–∏ ${config.PREMIUM_LIMIT} –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å –≤–º–µ—Å—Ç–æ ${config.GLOBAL_LIMIT}! –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å (–∑–∞–≥–ª—É—à–∫–∞).`,
                {
                    parse_mode: 'HTML',
                    reply_markup: {
                        inline_keyboard: [[{ text: '–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–º–∏—É–º', callback_data: 'activate_premium' }]],
                    },
                }
            );
        }
    });

    const more = async (ctx) => {
        const [_, commandType, genreValue] = ctx.match;
        const year = commandType === 'fresh' ? currentYear : null;
        const tag = commandType === 'ultra_fresh' ? 'new' : commandType === 'hipster' ? 'hipster' : null;
        const genre = commandType === 'genre' ? genreValue : null;
        const onlyLongTitle = commandType === 'long_title';

        await fetchTrack(ctx, {year, tag, genre, onlyLongTitle}, getUserToken);
    }

    const morePlay = async (ctx, isPlayFrom) => {
        await more(ctx);
        if (isPlayFrom) {
            await playFrom(ctx, true, null, '1:00');
        } else {
            await play(ctx, true);
        }
    };

    bot.action(/^more_(.+)_([^_]+)$/, (ctx) => more(ctx));
    bot.action(/^moreplay_(.+)_([^_]+)$/, (ctx) => morePlay(ctx));
    bot.action(/^moreplayfrom_(.+)_([^_]+)$/, (ctx) => morePlay(ctx, true));

    bot.action('activate_premium', async (ctx) => {
        const userId = Number(ctx.from.id);
        const chatId = ctx.chat.id;
        activatePremium(userId);

        const messageId = ctx.callbackQuery.message.message_id;
        try {
            await ctx.telegram.deleteMessage(chatId, messageId);
        } catch (e) {
            await ctx.reply('–±–ª–µ–Ω....');
        }
        await ctx.reply(
            `–ü—Ä–µ–º–∏—É–º —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è ${config.PREMIUM_LIMIT} –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å –¥–æ ${premiumUntil(userId)}.`,
            { parse_mode: 'HTML' }
        );
    });

    bot.action(/^play_(.+)$/, async (ctx) => {
        const trackId = ctx.match[1];
        await play(ctx, true, trackId);
    });

    bot.action(/^playfrom_(.+)$/, async (ctx) => {
        const trackId = ctx.match[1];
        await playFrom(ctx, true, trackId, '1:00');
    });

    bot.action(/^pause_(.+)$/, async (ctx) => {
        await pause(ctx, true);
    });

    bot.action(/^like_(.+)$/, async (ctx) => {
        const trackId = ctx.match[1];
        await like(ctx, true, trackId);
    });

    bot.on('text', (ctx) => {
        allBtns(ctx, `–í—Å–µ –∫–æ–º–∞–Ω–¥—ã: 
        
${ALL_COMMANDS_TEXT}

${DESCRIPTION}`);
    });
}

module.exports = { setupHandlers };